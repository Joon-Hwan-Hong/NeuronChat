for(i in 1:length(receptor_subunit_coeff)){
ind_i <- which(receptor_subunit_group==i)
if(length(ind_i)==1){
receptor_subunit_expr_tmp[1:cellgroup_number,i] <- expr_gene[1:cellgroup_number,length(lig_contributor_new)+ind_i]
} else if(length(ind_i)>1) {
receptor_subunit_expr_tmp[1:cellgroup_number,i] <- apply(expr_gene[1:cellgroup_number,length(lig_contributor_new)+ind_i],MARGIN = 1, function(x) mean(x))
} else {
receptor_subunit_expr_tmp[1:cellgroup_number,i] <- 1
}
}
if(length(receptor_subunit_coeff)>1){
rep_coeff <- rep(1:length(receptor_subunit_coeff),receptor_subunit_coeff)
receptor_subunit_expr <- apply(receptor_subunit_expr_tmp[,rep_coeff], MARGIN = 1, function(x) exp(mean(log(x))))} else {
receptor_subunit_expr <- receptor_subunit_expr_tmp
}
names(receptor_subunit_expr) <- cell.rownames
# # targets_up
# if(length(targets_up)>0){
#   targets_up_expr <- as.data.frame(cal_expr_by_group(df,targets_up,mean_method))
#   targets_up_max <- apply(targets_up_expr,2,FUN = max)
#   targets_up_nonzero <- which(targets_up_max>0)
#   if(length(targets_up_nonzero)>0){
#     targets_up_avg <- apply(targets_up_expr[,targets_up_nonzero,drop=FALSE],1,FUN = mean)}
# }
# # targets_down
# if(length(targets_down)>0){
#   targets_down_expr <- as.data.frame(cal_expr_by_group(df,targets_down,mean_method ))
#   targets_down_max <- apply(targets_down_expr,2,FUN = max)
#   targets_down_nonzero <- which(targets_down_max>0)
#   if(length(targets_down_nonzero)>0){
#     targets_down_avg <- apply(targets_down_expr[,targets_down_nonzero,drop=FALSE],1,FUN = mean)}
# }
#
# # targets_nichenet_avg <- rep(0,cellgroup_number)
# if(length(targets_nichenet)>0){
#   targets_nichenet <- targets_nichenet[1:N]
#   targets_nichenet_expr <- cal_expr_by_group(df,names(targets_nichenet),mean_method)
#   targets_nichenet_max <- apply(targets_nichenet_expr,2,FUN = max)
#   # targets_nichenet_nonzero <- which(targets_nichenet_max>0)
#   # if(length(targets_nichenet_nonzero)>0){
#   targets_nichenet_avg <- as.matrix(targets_nichenet_expr[,names(targets_nichenet),with=FALSE]) %*% as.matrix(targets_nichenet/sum(targets_nichenet))#}
# }
# compute prob_mtx without downstream weight
prob_mtx0 <- ((as.matrix(lig_contributor_expr))%*%t(as.matrix(receptor_subunit_expr)))
colnames(prob_mtx0) <- cell.rownames
rownames(prob_mtx0) <- cell.rownames
# # downstream weight
# exp_prob_mtx0 <- prob_mtx0^2/(prob_mtx0^2+1) #exp(-1/prob_mtx0);
# targets_up_weight <- rep(1,cellgroup_number)%*%t(targets_up_avg);
# # exp_targets_up_weight <- exp(-1/targets_up_weight)
# # exp_targets_up_weight <- 0.01+exp_targets_up_weight*exp_prob_mtx0/(exp_prob_mtx0+exp_targets_up_weight+1e-16)
# targets_up_weight <- 1+prob_mtx0*targets_up_weight^1/(targets_up_weight^1+prob_mtx0+1e-6)#*(length(targets_up_avg))^0.5
# targets_down_weight <- rep(1,cellgroup_number)%*%t(targets_down_avg);
# # exp_targets_down_weight <- exp(-targets_down_weight)
# # exp_targets_down_weight <- exp_targets_down_weight*exp_prob_mtx0/(exp_prob_mtx0+exp_targets_down_weight+1e-16)
# targets_down_weight <- 1-targets_down_weight^1/(targets_down_weight^1+prob_mtx0+1e-6)
# targets_nichenet_weight <- rep(1,cellgroup_number)%*%t(targets_nichenet_avg);
# targets_nichenet_weight <- 1+1*prob_mtx0*targets_nichenet_weight^1/(targets_nichenet_weight^1+prob_mtx0+1e-6)
# #targets_nichenet_weight <- prob_mtx0*targets_nichenet_weight^1/(targets_nichenet_weight^1+prob_mtx0+1e-6)
# # compute prob_mtx with downstream weight
# # prob_mtx <- prob_mtx0^1*targets_up_weight*targets_down_weight
# prob_mtx <- prob_mtx0^1*targets_nichenet_weight
prob_mtx <- prob_mtx0
} else if(method=='CellChat'){
if(length(lig_contributor_new)>1){
lig_contributor_expr <- apply(expr_gene[1:cellgroup_number,lig_contributor_new],MARGIN = 1, function(x) exp(mean(log(x))))
} else {  lig_contributor_expr <- expr_gene[1:cellgroup_number,lig_contributor_new] }
if(length(receptor_subunit_new)>1){
receptor_subunit_expr <- apply(expr_gene[1:cellgroup_number,receptor_subunit_new], MARGIN = 1, function(x) exp(mean(log(x))))
} else {   receptor_subunit_expr <- expr_gene[1:cellgroup_number,receptor_subunit_new]}
names(lig_contributor_expr) <- cell.rownames
names(receptor_subunit_expr) <- cell.rownames
prob_mtx0 <- ((as.matrix(lig_contributor_expr))%*%t(as.matrix(receptor_subunit_expr)))
hill <- function(x,K){
return(x^2/(x^2+K^2))
}
prob_mtx0 <- hill((as.matrix(lig_contributor_expr)),K)%*%hill(t(as.matrix(receptor_subunit_expr)),K)
colnames(prob_mtx0) <- cell.rownames
rownames(prob_mtx0) <- cell.rownames
prob_mtx <- prob_mtx0
} else if(method=='CellPhoneDB'){
if(length(lig_contributor_new)>1){
lig_contributor_expr <- apply(expr_gene[1:cellgroup_number,lig_contributor_new],MARGIN = 1, function(x) min(x))
} else {  lig_contributor_expr <- expr_gene[1:cellgroup_number,lig_contributor_new] }
if(length(receptor_subunit_new)>1){
receptor_subunit_expr <- apply(expr_gene[1:cellgroup_number,receptor_subunit_new], MARGIN = 1, function(x) min(x))
} else {   receptor_subunit_expr <- expr_gene[1:cellgroup_number,receptor_subunit_new]}
names(lig_contributor_expr) <- cell.rownames
names(receptor_subunit_expr) <- cell.rownames
prob_mtx0_lig <- as.matrix(lig_contributor_expr)%*%matrix(rep(1,length(cell.rownames)),nrow = 1,ncol = length(cell.rownames))
prob_mtx0_rec <- matrix(rep(1,length(cell.rownames)),nrow = length(cell.rownames),ncol =1 )%*%t(as.matrix(receptor_subunit_expr))
# prob_mtx0 <- ((as.matrix(lig_contributor_expr))%*%matrix(rep(1,length(cell.rownames)),nrow = 1,ncol = length(cell.rownames))+ matrix(rep(1,length(cell.rownames)),nrow = length(cell.rownames),ncol =1 )%*%t(as.matrix(receptor_subunit_expr)))
prob_mtx0 <- (prob_mtx0_lig+ prob_mtx0_rec)/2
prob_mtx0 <- prob_mtx0*(prob_mtx0_lig>0)*(prob_mtx0_rec>0)
colnames(prob_mtx0) <- cell.rownames
rownames(prob_mtx0) <- cell.rownames
prob_mtx <- prob_mtx0
}
rownames(prob_mtx) <- cell.rownames
colnames(prob_mtx) <- cell.rownames
prob_mtx <- prob_mtx[sender,receiver]
prob_mtx0 <- prob_mtx0[sender,receiver]
# prob_mtx <- exp_prob_mtx0*targets_up_weight*targets_down_weight
# prob_mtx <- exp_prob_mtx0*exp_targets_up_weight*exp_targets_down_weight
my_list <- list("prob_mtx" = prob_mtx, "ligand_score" = lig_contributor_expr, "receptor_score" = receptor_subunit_expr, "cell_group"=rownames(expr_gene),
"prob_mtx0" = prob_mtx0, "targets_up_score" = targets_up_avg, "targets_down_score" = targets_down_avg, "targets_nichenet_score"=targets_nichenet_avg)
return(my_list)
}
#' Calculate the communication strength matrix for a single ligand-target pair (with permutation test)
#' @param df a data frame or data.table containing signaling gene expression (row: cell; column: genes; the last column is cell group labels)
#' @param sender sending cell groups
#' @param receiver receiving cell groups
#' @param interaction_name name of the ligand-target interaction
#' @param lig_contributor a vector with gene symbols that are regarded as ligand contributors
#' @param lig_contributor_group a vector indicating the grouping of ligand contributors
#' @param lig_contributor_coeff a vector with stoichiometry of each group of ligand contributors for calculating ligand abundance
#' @param receptor_subunit_new a vector with updated gene symbols (removing those excluded from the expression data) that are regarded as target subunits
#' @param receptor_subunit_group a vector indicating the grouping of target subunits
#' @param receptor_subunit_coeff a vector with stoichiometry of each group of target subunits for calculating target abundance
#' @param M number of permutation tests
#' @param fdr cutoff value that determines the significance of detected link
#' @param targets_up deprecated
#' @param targets_down deprecated
#' @param targets_nichenet deprecated
#' @param N deprecated
#' @param K deprecated
#'
#' @return
#' @export
#'
#' @examples
neuron_chat_downstream <- function(df,sender,receiver,interaction_name,lig_contributor,lig_contributor_group,lig_contributor_coeff,
receptor_subunit,receptor_subunit_group,receptor_subunit_coeff,targets_up,targets_down,targets_nichenet,N,M,fdr,K=0.5,method=NULL,mean_method=NULL){
ind_lig <- which(lig_contributor %in% colnames(df));lig_contributor_new <- lig_contributor[ind_lig]
ind_re <- which(receptor_subunit %in% colnames(df));receptor_subunit_new <- receptor_subunit[ind_re]
lig_contributor_group <- lig_contributor_group[ind_lig]
receptor_subunit_group <- receptor_subunit_group[ind_re]
targets_up <- targets_up[which(targets_up %in% colnames(df))]
targets_down <- targets_down[which(targets_down %in% colnames(df))]
targets_nichenet <- targets_nichenet[which(names(targets_nichenet) %in% colnames(df))]
my_list <- cal_prob_mtx_downstream(df,sender,receiver,lig_contributor_new,lig_contributor_group,lig_contributor_coeff, receptor_subunit_new,receptor_subunit_group,receptor_subunit_coeff,targets_up,targets_down,targets_nichenet,N,K,method,mean_method)
prob_mtx <- my_list$prob_mtx
# FC.lig <- log2(max(my_list$ligand_score+1e-3)/min(my_list$ligand_score+1e-3))
# FC.rec <- log2(max(my_list$receptor_score+1e-3)/min(my_list$receptor_score+1e-3))
FC.lig <- max(my_list$ligand_score) - min(my_list$ligand_score)
FC.rec <- max(my_list$receptor_score) - min(my_list$receptor_score)
FC <- max(FC.lig,FC.rec)
#FC <- min(FC.lig,FC.rec)
## permutation
if(M==0 | max(prob_mtx)==0){net <- prob_mtx;pvalue <- NA*net} else {
#prob_mtx_permutation <- array(0,c(dim(prob_mtx)[1],dim(prob_mtx)[2],M))
pvalue <- matrix(0, dim(prob_mtx)[1],dim(prob_mtx)[2]);
# for(j in 1:M){
#   df_j <- df;
#   df_j$cell_subclass[df$cell_subclass %in% sender] <- sample(df$cell_subclass[df$cell_subclass %in% sender],length(df$cell_subclass[df$cell_subclass %in% sender]), FALSE)
#   df_j$cell_subclass[df$cell_subclass %in% receiver] <- sample(df$cell_subclass[df$cell_subclass %in% receiver],length(df$cell_subclass[df$cell_subclass %in% receiver]), FALSE)
#   my_list_temp <- cal_prob_mtx_downstream(df_j,sender,receiver,lig_contributor_new,lig_contributor_group,lig_contributor_coeff,receptor_subunit_new,receptor_subunit_group,receptor_subunit_coeff,targets_up,targets_down,targets_nichenet,N)
#   prob_mtx_permutation[,,j] <- my_list_temp$prob_mtx
#   pvalue <- pvalue+1*(prob_mtx_permutation[,,j]>prob_mtx)
# }
df_j <- df;
prob_mtx_permutation <- sapply(seq_along(1:M), function(j) {
df_j$cell_subclass[df$cell_subclass %in% sender] <- sample(df$cell_subclass[df$cell_subclass %in% sender],length(df$cell_subclass[df$cell_subclass %in% sender]), FALSE)
df_j$cell_subclass[df$cell_subclass %in% receiver] <- sample(df$cell_subclass[df$cell_subclass %in% receiver],length(df$cell_subclass[df$cell_subclass %in% receiver]), FALSE)
my_list_temp <- cal_prob_mtx_downstream(df_j,sender,receiver,lig_contributor_new,lig_contributor_group,lig_contributor_coeff,receptor_subunit_new,receptor_subunit_group,receptor_subunit_coeff,targets_up,targets_down,targets_nichenet,N,K,method,mean_method)
prob_mtx_permutation_j <- (my_list_temp$prob_mtx > prob_mtx)*1
prob_mtx_permutation_j
},simplify = 'array')
pvalue <- apply(prob_mtx_permutation,1:2,sum)
pvalue <- pvalue/M
pvalue_v <- c(pvalue)
## FDR correction Benjamini-Hochberg Procedure
pvalue_v_sort <- sort.int(pvalue_v, decreasing = FALSE, index.return = TRUE)
alpha_i <- fdr*(1:length(pvalue_v))/length(pvalue_v)
k <- which(pvalue_v_sort$x<alpha_i)
prob_mtx_sig <- 0*pvalue
prob_mtx_sig[pvalue_v_sort$ix[k]]<-prob_mtx[pvalue_v_sort$ix[k]]
# if(max(prob_mtx>0)){
# net <- prob_mtx/max(prob_mtx)} else {net <- prob_mtx}
net <- prob_mtx_sig;
# net_old <-net
# net[pvalue>0.05] <- 0
# net.rownames <- rownames(prob_mtx)
}
# net.rownames <- sort(unique(target_df$cell_subclass))
# rownames(net)<- net.rownames;colnames(net)<- net.rownames
# plot
# library(GGally);library(network);library(sna);library(ggplot2);library(reshape2);library(circlize)
# # q90 <- quantile(net,0.95);net[net<q90] <-0
# group = structure(rep(1,dim(net)[1]),names=net.rownames)
# par(mfrow=c(1,1))
# netVisual_circle_zw(net, color.use = scPalette(nrow(net)),group=group, title.name = interaction_name, sources.use = net.rownames, targets.use = net.rownames, remove.isolate = FALSE, top = 1,
#                     weight.scale = FALSE, vertex.weight =max(colSums(net)/(max(colSums(net))+0.01),0.1), vertex.weight.max = NULL, vertex.size.max = NULL, vertex.label.cex=1,vertex.label.color= 'black',
#                     edge.weight.max = NULL, edge.width.max=5, alpha.edge = 0.6, label.edge = FALSE,edge.label.color='black',edge.label.cex=0.8,
#                     edge.curved=0.2,shape='circle',layout=in_circle(), margin=0.2,
#                     arrow.width=1,arrow.size = 0.8)
# ## barplot for ligand score & receptor score
# data <- data.frame(cell_type=my_list$cell_group,ligand_score=my_list[[2]],receptor_score=my_list[[3]])
# g1<- ggplot(data, aes(x=cell_type, y=ligand_score)) + geom_bar(stat = "identity")
# g2<- ggplot(data, aes(x=cell_type, y=receptor_score)) + geom_bar(stat = "identity")
# print(g1/g2)
# col_map=colorspace::diverge_hsv(10);
# par(mfrow=c(1,1))
# col_map = brewer.pal(8,"YlOrBr")
# # col_map = colorRamp2(seq(min(net), max(net), length = 3), c( "#EEEEEE",'pink',"red"), space = "RGB")
# column_ha = HeatmapAnnotation( Rec_score = anno_barplot(my_list[[3]],border='FALSE',height=unit(2.5,'cm'),gp = gpar(fill = "lightskyblue1")),
#                                annotation_name_side='left')
# row_ha = rowAnnotation(Lig_score = anno_barplot(my_list[[2]],border='FALSE',width=unit(2.5,'cm'),gp = gpar(fill = "lightskyblue1")))
# left_Annotation = rowAnnotation(foo = anno_block(gp = gpar(fill =2:(length(unique(big_group))+1)), labels = unique(big_group)))
# bottom_Annotation=HeatmapAnnotation(foo = anno_block(gp = gpar(fill =2:(length(unique(big_group))+1)), labels = unique(big_group)))
# if(max(net)>0){
#   h1 <- Heatmap(net, name = "Prob", left_annotation =left_Annotation,bottom_annotation = bottom_Annotation,
#                 top_annotation = column_ha, right_annotation = row_ha,col = col_map,
#                 cluster_rows = FALSE,cluster_columns=FALSE,
#                 split= big_group[rownames(net)],column_split = big_group[rownames(net)],
#                 row_names_side='left',column_names_side='bottom',
#                 row_title='Sender',row_title_side='left',row_title_gp = gpar(fontsize = 16),
#                 column_title='Receiver',column_title_side = "bottom",column_title_gp = gpar(fontsize = 16))#,
#   #   width = unit(11,'cm'),
#   #   height = unit(11,'cm'))
#   # print(h1)
#   draw(h1, column_title = interaction_name, column_title_gp = gpar(fontsize = 16))}
list_return <- list(net=net,FC=FC,pvalue=pvalue,net0=my_list$prob_mtx, info=sum(net),ligand.abundance = my_list$ligand_score, target.abundance = my_list$receptor_score)
return(list_return)
# net; color.use = NULL;title.name = NULL; sources.use = NULL; targets.use = NULL; remove.isolate = FALSE; top = 1;
# weight.scale = FALSE; vertex.weight = 20; vertex.weight.max = NULL; vertex.size.max = NULL; vertex.label.cex=1;vertex.label.color= "black";
# edge.weight.max = NULL; edge.width.max=8; alpha.edge = 0.6; label.edge = FALSE;edge.label.color='black';edge.label.cex=0.8;
# edge.curved=0.2;shape='circle';layout=in_circle(); margin=0.2; vertex.size = NULL;
# arrow.width=1;arrow.size = 0.2
# CellChat::netVisual_chord_cell_internal(net, color.use = scPalette(nrow(net)), sources.use = net.rownames, targets.use = net.rownames,
#                                         group=group,remove.isolate = FALSE,scale = FALSE,
#                                         title.name = interaction_name)
# chordDiagram(net, group = group, grid.col = group,
#              reduce=-1,scale=FALSE,link.visible = net > 0.05,
#              small.gap=1, big.gap=10,
#              directional = -1, direction.type = c("diffHeight","arrows"),
#              link.arr.type = 'big.arrow')
}
#' Calculate the communication strength matrix for all ligand-target pairs
#' @param object a NeuronChat object
#' @param sender sending cell groups
#' @param receiver receiving cell groups
#' @param M number of permutation tests
#' @param fdr cutoff value that determines the significance of detected link
#' @param N deprecated
#' @param K deprecated
#' @param strict indicating whether the calculation of communication score for an ligand-target pair requires that input data include at least one gene for each contributing gene group. strict=1 means 'require',  strict=0 means not 'require'. Default value is 1
#'
#' @return
#' @export
#'
#' @examples
run_NeuronChat <- function(object=object,sender=NULL,receiver=NULL,N=0,M=100,fdr=0.05,K=0.5,method=NULL,mean_method=NULL,strict=1){
start.time <- Sys.time()
# interactionDB <- readRDS('interactionDB_interactor.rds')
# interactionDB <- interactionDB_interactor_full_synGO
interactionDB <- object@DB
# ligand_target_matrix_mgi <- readRDS('~/Documents/CellChat/Rcode_cellchat_VISp_ALM/ligand_target_matrix_mgi.rds')
net0_all <- list() # original probability mtx
net_all <- list() # probability mtx filtered by pvalue with cutoff 0.05
pvalue_all <- list()
FC_all <- rep(0,length(interactionDB))
info_all <- rep(0,length(interactionDB))
net.rownames <- sort(unique(object@data.signaling$cell_subclass),method='radix')
if(is.null(sender)){sender <- net.rownames};if(is.null(receiver)){receiver <- net.rownames}
ligand.abundance_all <- matrix(0,nrow=length(net.rownames),ncol=length(interactionDB))
target.abundance_all <- ligand.abundance_all
for(j in 1:length(interactionDB)){
interaction_name <- names(interactionDB)[j]
lig_contributor <- interactionDB[[j]]$lig_contributor
receptor_subunit <- interactionDB[[j]]$receptor_subunit
lig_contributor_group <- interactionDB[[j]]$lig_contributor_group
lig_contributor_coeff <- interactionDB[[j]]$lig_contributor_coeff
receptor_subunit_group <- interactionDB[[j]]$receptor_subunit_group
receptor_subunit_coeff <- interactionDB[[j]]$receptor_subunit_coeff
# targets_up <- interactionDB[[j]]$targets_up
# targets_up <- interactionDB[[j]]$interactors
# targets_down <- interactionDB[[j]]$targets_down
# targets_up <-  character(0)# interactionDB[[j]]$interactors
targets_up  <- character(0)
targets_down <- character(0)
#if(receptor_subunit %in% colnames(ligand_target_matrix_mgi)){
# targets_nichenet <- sort(ligand_target_matrix_mgi[,receptor_subunit],decreasing = T)
targets_nichenet <- character(0)
#} else {targets_nichenet <- character(0)}
lig_boolean_group <- (lig_contributor %in% names(object@data.signaling))*lig_contributor_group;
rec_boolean_group <- (receptor_subunit %in% names(object@data.signaling))*receptor_subunit_group;
if(strict==1){
lig_boolean <- prod(unique(lig_contributor_group) %in% lig_boolean_group)
rec_boolean <- prod(unique(receptor_subunit_group) %in% rec_boolean_group)
} else {
lig_boolean <- sum(unique(lig_contributor_group) %in% lig_boolean_group)>0
rec_boolean <- sum(unique(receptor_subunit_group) %in% rec_boolean_group)>0
}
if(prod(lig_boolean,rec_boolean)==0){net_all[[j]]=matrix(0,nrow=length(sender),ncol=length(receiver),
dimnames=list(sender,receiver))
#if(prod((c(lig_contributor,receptor_subunit) %in% names(object@data.signaling)))==0){net_all[[j]]=matrix(0,nrow=length(sender),ncol=length(receiver),
#                                                                                               dimnames=list(sender,receiver))
net0_all[[j]] <- net_all[[j]]
pvalue_all[[j]] <- net_all[[j]]
} else
{tmp <- neuron_chat_downstream(object@data.signaling,sender,receiver,interaction_name,lig_contributor,lig_contributor_group,lig_contributor_coeff,receptor_subunit,receptor_subunit_group,receptor_subunit_coeff,targets_up,targets_down,targets_nichenet,N,M,fdr,K,method,mean_method)
net_all[[j]] <- tmp$net
net0_all[[j]] <- tmp$net0
pvalue_all[[j]] <- tmp$pvalue
FC_all[j] <- tmp$FC
info_all[j] <- tmp$info
ligand.abundance_all[1:length(net.rownames),j] <- tmp$ligand.abundance
target.abundance_all[1:length(net.rownames),j] <- tmp$target.abundance
}
}
rownames(ligand.abundance_all) <- names(tmp$ligand.abundance);colnames(ligand.abundance_all) <- names(interactionDB)
rownames(target.abundance_all) <- names(tmp$target.abundance);colnames(target.abundance_all) <- names(interactionDB)
names(net_all) <- names(interactionDB)
names(net0_all) <- names(interactionDB)
# tmp_list <- future_lapply(seq_along(1:length(interactionDB)),function(j){
#   interaction_name <- names(interactionDB)[j]
#   lig_contributor <- interactionDB[[j]]$lig_contributor
#   receptor_subunit <- interactionDB[[j]]$receptor_subunit
#   lig_contributor_group <- interactionDB[[j]]$lig_contributor_group
#   lig_contributor_coeff <- interactionDB[[j]]$lig_contributor_coeff
#   receptor_subunit_group <- interactionDB[[j]]$receptor_subunit_group
#   receptor_subunit_coeff <- interactionDB[[j]]$receptor_subunit_coeff
#   # targets_up <- interactionDB[[j]]$targets_up
#   # targets_down <- interactionDB[[j]]$targets_down
#   targets_up <-  character(0)# interactionDB[[j]]$interactors
#   targets_down <- character(0)
#   if(receptor_subunit %in% colnames(ligand_target_matrix_mgi)){
#     # targets_nichenet <- sort(ligand_target_matrix_mgi[,receptor_subunit],decreasing = T)
#     targets_nichenet <- character(0)
#   } else {targets_nichenet <- character(0)}
#   if(prod((c(lig_contributor,receptor_subunit) %in% names(object@data.signaling)))==0){tmp$net <- matrix(0,nrow=length(sender),ncol=length(receiver),
#                                                                                                  dimnames=list(sender,receiver))
#   tmp$net0 <- tmp$net
#   tmp$pvalue<- tmp$net0
#   tmp$FC <- FC_all[j]
#   tmp$info <- 0
#   tmp$ligand.abundance <- ligand.abundance_all[1:length(net.rownames),j]
#   tmp$target.abundance <- ligand.abundance_all[1:length(net.rownames),j]
#   } else
#   {tmp <- neuron_chat_downstream(object@data.signaling,sender,receiver,interaction_name,lig_contributor,lig_contributor_group,lig_contributor_coeff,receptor_subunit,receptor_subunit_group,receptor_subunit_coeff,targets_up,targets_down,targets_nichenet,N,M)
#   }
#   tmp
# },future.seed = TRUE)
# for(j in length(tmp_list)){
# net_all[[j]] <- tmp_list[[j]]$net
# net0_all[[j]] <- tmp_list[[j]]$net0
# pvalue_all[[j]] <- tmp_list[[j]]$pvalue
# FC_all[j] <- tmp_list[[j]]$FC
# info_all[j] <- tmp_list[[j]]$info
# ligand.abundance_all[1:length(net.rownames),j] <- tmp_list[[j]]$ligand.abundance
# target.abundance_all[1:length(net.rownames),j] <- tmp_list[[j]]$target.abundance}
end.time <- Sys.time();time.taken <- end.time - start.time;
print(time.taken)
#list_return <- list(net_all=net_all,net0_all=net0_all,FC_all=FC_all,pvalue_all=pvalue_all)
#return(list_return)
object@net0 <- net0_all
object@pvalue <- pvalue_all
object@net <- net_all
object@fc <- FC_all
object@info <- info_all
object@ligand.abundance <- ligand.abundance_all
object@target.abundance <- target.abundance_all
return(object)
}
#' Aggregation of communication networks over all ligand-target pairs
#' @param net_list a list containing communication strength matrices for all ligand-target pairs, e.g., 'net' slot of NeuronChat object after run 'run_NeuronChat'
#' @param method one of 'weight','count','weighted_count','weighted_count2' and 'weight_threshold'
#' @param cut_off threshold used for methods 'weighted_count2' and 'weight_threshold'
#' @return
#' @export
#'
#' @examples
net_aggregation <- function(net_list,method=c('weight','count','weighted_count','weighted_count2','weight_threshold'),cut_off=0.05){
method <- match.arg(method)
if(method=='weighted_count'){
net_aggregated <- 0*net_list[[1]]
for(jj in 1:length(net_list)){
net_aggregated <- net_aggregated+sum(net_list[[jj]])*(net_list[[jj]]>0);
}} else if(method=='count'){
net_aggregated <- 0*net_list[[1]]
for(jj in 1:length(net_list)){
net_aggregated <- net_aggregated+1*(net_list[[jj]]>0);
}
} else if(method=='weighted_count2'){
net_aggregated <- 0*net_list[[1]]
for(jj in 1:length(net_list)){
net_aggregated <- net_aggregated+sum(net_list[[jj]])/(1e-6+sum(net_list[[jj]]>quantile(net_list[[jj]],probs = cut_off)))*(net_list[[jj]]>quantile(net_list[[jj]],probs = cut_off));
}
}else if(method=='weight_threshold'){
net_aggregated <- 0*net_list[[1]]
for(jj in 1:length(net_list)){
net_aggregated <- net_aggregated+net_list[[jj]]*(net_list[[jj]]>quantile(net_list[[jj]],probs = cut_off));
}
}
else {
net_aggregated <- 0*net_list[[1]]
for(jj in 1:length(net_list)){
net_aggregated <- net_aggregated+net_list[[jj]];
}
}
return(net_aggregated)
}
x <- createNeuronChat(t(mat_sc),DB='mouse',group.by = as.character(meta_sc$subclass_label)) # input data should be gene by cell matrix
library(NeuronChat)
load("/Users/weizhao/Documents/NeuronChat-ST/ST_datasets_processed/MERFISH/visual_spatial_MERFISH.rda") # using your own path
set.seed(123)
x <- createNeuronChat(t(mat_sc),DB='mouse',group.by = as.character(meta_sc$subclass_label)) # input data should be gene by cell matrix
find_funs("t")
require("sos")
findFn("computeEstimate")
library(prada)
find_funs("t")
install.packages('prada')
library(prada)
find_funs("t")
?t
roxygen2::roxygenise()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(fig.width=6, fig.height=6,fig.align = "center")
library(NeuronChat)
library(CellChat)
# load example data: cortex data from Yao 2021, processed
data(list='cortex_data')
# subset the data by choosing the region VISp
region_name <- 'VISp'; cell_class <- names(table(meta$class_label))
cell_idx <- which(meta$region_label %in% region_name & meta$class_label %in% cell_class & !(meta$subclass_label %in%c('Car3','CR','DG','L2/3 IT PPP','L5/6 IT TPE-ENT')))
target_df_single  <- target_df[cell_idx,] # a data frame: row  cell, column gene (the last column is the cell subclass)
meta_tmp <- meta[cell_idx,];rownames(meta_tmp) <- meta_tmp$sample_name # subset meta
df_group <- meta_tmp[!duplicated(meta_tmp$subclass_label),c('class_label','subclass_label')]
group <- structure(df_group$class_label,names=df_group$subclass_label) # create the cell class for the subclasses, used for plot
# creat NeuronChat object; choose the database 'mouse' for mouse data; 'human' for human data
# note that the first parameter should be a numeric matrix with row gene and column cell
x <- createNeuronChat(t(as.matrix(target_df_single[,1:(dim(target_df_single)[2]-1)])),DB='mouse',group.by = target_df_single$cell_subclass);
# M is for the permutation test; typically ~4 mins when M=100, depending on the dataset size and the number of cell groups
# setting M=10 to get a quick start
x <- run_NeuronChat(x,M=100)
# the the communication networks for individual interaction pairs are stored in slot 'net'
# aggregate the communication networks over all interaction pairs, method can be 'weight', 'count' and so on
net_aggregated_x <- net_aggregation(x@net,method = 'weight')
par(mfrow=c(1,2))
# Visualization, circle plot, for the aggregated network
netVisual_circle_neuron(net_aggregated_x,group=group,vertex.label.cex = 1)
# Visualization, chordDiagram, for the aggregated network; also using cellchat function netVisual_chord_cell_internal(net_aggregated_x, group = group,lab.cex=1)
netVisual_chord_neuron(x,method = 'weight',group=group,lab.cex = 1)
# Visualization, heatmap for the aggregated network
heatmap_aggregated(x, method='weight',group=group)
par(mfrow=c(1,2))
# Visualization for the single interaction pair, circle plot
netVisual_circle_neuron(x@net$Glu_Gria2,group=group,vertex.label.cex = 1)
# Visualization for the single interaction pair, chord diagram
netVisual_chord_neuron(x,interaction_use='Glu_Gria2',group=group,lab.cex = 1)
# Visualization for the single interaction pair, heatmap
heatmap_single(x,interaction_name='Glu_Gria2',group=group)
# Visualization for the single interaction pair, heatmap with violin plots showing expression of genes realted to ligand and target
lig_tar_heatmap(x,interaction_name='Glu_Gria2',width.vector=c(0.38,0.35,0.27))
g1 <- rankNet_Neuron(x,slot.name = "net",measure = c("weight"),mode='single',font.size = 5)
g2 <- rankNet_Neuron(x,slot.name = "net",measure = c("count"),mode='single',font.size = 5)
g1+g2
# selectK_Neuron(x,pattern = "outgoing")
# selectK_Neuron(x,pattern = "incoming")
x<- identifyCommunicationPatterns_Neuron(x, slot.name = "net", pattern = c("outgoing"), k=4,height = 18)
x<- identifyCommunicationPatterns_Neuron(x, slot.name = "net", pattern = c("incoming"), k=4,height = 18)
library(ggalluvial)
netAnalysis_river_Neuron(x,slot.name = "net", pattern = c("outgoing"),font.size = 2.5,cutoff.1 = 0.5,cutoff.2=0.5)
netAnalysis_river_Neuron(x,slot.name = "net", pattern = c("incoming"),font.size = 2.5,cutoff.1 = 0.5,cutoff.2=0.5)
x <- computeNetSimilarity_Neuron(x,type='functional')
x  <- CellChat::netEmbedding(x, slot.name = "net_analysis", type = "functional")
x <- CellChat::netClustering(x, type='functional',slot.name = "net_analysis",k=5)
netVisual_embedding_Neuron(x, type = "functional", label.size = 5,pathway.remove.show = F)
netVisual_embeddingZoomIn_Neuron(x, type = "functional", nCol = 2,label.size = 3)
library(NeuronChat)
### MERFISH dataset plus scRNA-seq
```{r fig08, fig.height = 5, fig.width = 10}
## MERFISH, 2021, https://www.nature.com/articles/s41586-021-03705-x
load("/Users/weizhao/Documents/NeuronChat-ST/ST_datasets_processed/MERFISH/visual_spatial_MERFISH.rda") # using your own path
set.seed(123)
x <- createNeuronChat(t(mat_sc),DB='mouse',group.by = as.character(meta_sc$subclass_label)) # input data should be gene by cell matrix
x <- run_NeuronChat(x,M=100)
net_aggregated_x <- net_aggregation(x@net,method = 'weight')
net <- net_aggregated_x/max(net_aggregated_x)
# only keep top10 links with highest total weight
net_sort <- sort(net,index.return	=T,decreasing = T)
net_top10 <-net*0;net_top10[net_sort$ix[1:10]] <-net[net_sort$ix[1:10]]
# save(mat_sc,meta_sc, meta, net, net_top10,file='visual_spatial_MERFISH.rda')
# circle plot of communication network
par(mfrow=c(1,2))
library(scales);colours <- hue_pal()(dim(net)[1]);
netVisual_circle_neuron(net,edge.width.max = 10,color.use = colours,vertex.label.cex = 1.5)
netVisual_circle_neuron(net_top10,edge.width.max = 10,color.use = colours,vertex.label.cex = 1.5)
par(mfrow=c(1,2))
library(scales);colours <- hue_pal()(dim(net)[1]);
netVisual_circle_neuron(net,edge.width.max = 10,color.use = colours,vertex.label.cex = 1.5)
netVisual_circle_neuron(net_top10,edge.width.max = 10,color.use = colours,vertex.label.cex = 1.5)
par(mfrow=c(1,2))
library(scales);colours <- hue_pal()(dim(net)[1]);
netVisual_circle_neuron(net,edge.width.max = 10,color.use = colours,vertex.label.cex = 1.5)
netVisual_circle_neuron(net_top10,edge.width.max = 10,color.use = colours,vertex.label.cex = 1.5)
netVisual_circle_neuron(net,edge.width.max = 10,color.use = colours,vertex.label.cex = 1)
netVisual_circle_neuron(net_top10,edge.width.max = 10,color.use = colours,vertex.label.cex = 1)
par(mfrow=c(1,2))
library(scales);colours <- hue_pal()(dim(net)[1]);
netVisual_circle_neuron(net,edge.width.max = 10,color.use = colours,vertex.label.cex = 1)
netVisual_circle_neuron(net_top10,edge.width.max = 10,color.use = colours,vertex.label.cex = 1)
spatialMap(meta,celltype_label = 'cell_type',centroid_x = 'sdimx',centroid_y = 'sdimy',pt.size = 1,pt.alpha = 0.8,font.size = 10) + labs(x ="x coordinate", y = "y coordinate",color='Glutamatergic \n subclass')
knit_with_parameters("~/Documents/CellChat/NeuronChat/vignettes/Spatial_analysis.Rmd")
?cell_proximity_enrichment_score
?run_NeuronChat
?ggalluvial
